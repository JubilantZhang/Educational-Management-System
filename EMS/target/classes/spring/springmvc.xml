<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!--对com.springmvc包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能-->
    <context:component-scan base-package="com.springmvc"></context:component-scan>

    <!--静态资源解析包括：js、css、img、..-->
    <!--如果webapp下你新建了文件夹，想访问里面的静态资源，那么就要在这配置一下-->
    <!--<mvc:resources mapping="/js/**" location="/js/"></mvc:resources>-->
    <!--<mvc:resources mapping="/img/**" location="/img/"></mvc:resources>-->
    <!--<mvc:resources location="/css/" mapping="/css/**"></mvc:resources>-->
    <!--<mvc:resources location="/fonts/" mapping="/fonts/**"></mvc:resources>-->
    <!--<mvc:resources mapping="/My97DatePicker/**" location="/My97DatePicker/"></mvc:resources>-->
    <!--加载静态资源-->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>
    <!--注解映射器-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>-->
    <!--注解适配器-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean>-->
    <!--使用mvc:annotation-driven代替上边注解映射器和适配器配置
    mvc:annotation-driven默认加载很多的参数绑定方法，
    比如json转换解析器就默认加载了，如果使用mvc:annotation-driven就不用配置上变的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
    实际开发使用 mvc:annotation-driven-->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"></mvc:annotation-driven>

    <!--配置视图解析器
    解析jsp，默认使用jstl标签，classpath下得有jstl的包-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀和后缀-->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="/WEB-INF/view/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--自定义参数绑定-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <list>
                <!--日期类型转换-->
                <bean class="com.springmvc.controller.converter.DateConverter"></bean>
            </list>
        </property>
    </bean>

    <!--校验器-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <!--hibernate校验器-->
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"></property>
        <!--指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties-->
        <property name="validationMessageSource" ref="messageSource"></property>
    </bean>

    <!--校验错误信息配置文件-->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!--资源文件名-->
        <property name="basenames">
            <list>
                <value>CustomValidationMessages</value>
            </list>
        </property>
        <!--资源文件编码格式-->
        <property name="fileEncodings" value="utf-8"></property>
        <!--对资源文件内容缓存时间，单位秒-->
        <property name="cacheSeconds" value="120"></property>
    </bean>

    <!--全局异常处理器,只要实现HandlerExceptionResolver接口就是全局异常处理器-->
    <bean class="com.springmvc.exception.CustomExceptionResolver"></bean>

</beans>